// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 11, col: 1, offset: 27},
			expr: &actionExpr{
				pos: position{line: 11, col: 9, offset: 35},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 11, col: 9, offset: 35},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 11, col: 9, offset: 35},
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 9, offset: 35},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 11, col: 12, offset: 38},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 16, offset: 42},
								name: "query",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 11, col: 22, offset: 48},
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 22, offset: 48},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 25, offset: 51},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "query",
			pos:  position{line: 13, col: 1, offset: 76},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 86},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 86},
						run: (*parser).callonquery2,
						expr: &labeledExpr{
							pos:   position{line: 14, col: 5, offset: 86},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 11, offset: 92},
								name: "procChain",
							},
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 255},
						run: (*parser).callonquery5,
						expr: &seqExpr{
							pos: position{line: 18, col: 5, offset: 255},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 18, col: 5, offset: 255},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 7, offset: 257},
										name: "search",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 18, col: 14, offset: 264},
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 14, offset: 264},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 18, col: 17, offset: 267},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 18, col: 22, offset: 272},
										expr: &ruleRefExpr{
											pos:  position{line: 18, col: 22, offset: 272},
											name: "chainedProc",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 25, col: 5, offset: 483},
						run: (*parser).callonquery14,
						expr: &labeledExpr{
							pos:   position{line: 25, col: 5, offset: 483},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 7, offset: 485},
								name: "search",
							},
						},
					},
				},
			},
		},
		{
			name: "procChain",
			pos:  position{line: 29, col: 1, offset: 556},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 570},
				run: (*parser).callonprocChain1,
				expr: &seqExpr{
					pos: position{line: 30, col: 5, offset: 570},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 30, col: 5, offset: 570},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 11, offset: 576},
								name: "proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 16, offset: 581},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 30, col: 21, offset: 586},
								expr: &ruleRefExpr{
									pos:  position{line: 30, col: 21, offset: 586},
									name: "chainedProc",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainedProc",
			pos:  position{line: 38, col: 1, offset: 772},
			expr: &actionExpr{
				pos: position{line: 38, col: 15, offset: 786},
				run: (*parser).callonchainedProc1,
				expr: &seqExpr{
					pos: position{line: 38, col: 15, offset: 786},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 38, col: 15, offset: 786},
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 15, offset: 786},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 38, col: 18, offset: 789},
							val:        "|",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 38, col: 22, offset: 793},
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 22, offset: 793},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 25, offset: 796},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 27, offset: 798},
								name: "proc",
							},
						},
					},
				},
			},
		},
		{
			name: "search",
			pos:  position{line: 40, col: 1, offset: 822},
			expr: &actionExpr{
				pos: position{line: 41, col: 5, offset: 833},
				run: (*parser).callonsearch1,
				expr: &labeledExpr{
					pos:   position{line: 41, col: 5, offset: 833},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 41, col: 10, offset: 838},
						name: "searchExpr",
					},
				},
			},
		},
		{
			name: "searchExpr",
			pos:  position{line: 45, col: 1, offset: 897},
			expr: &actionExpr{
				pos: position{line: 46, col: 5, offset: 912},
				run: (*parser).callonsearchExpr1,
				expr: &seqExpr{
					pos: position{line: 46, col: 5, offset: 912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 46, col: 5, offset: 912},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 11, offset: 918},
								name: "searchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 22, offset: 929},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 46, col: 27, offset: 934},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 27, offset: 934},
									name: "oredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "oredSearchTerm",
			pos:  position{line: 50, col: 1, offset: 1002},
			expr: &actionExpr{
				pos: position{line: 50, col: 18, offset: 1019},
				run: (*parser).callonoredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 50, col: 18, offset: 1019},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 50, col: 18, offset: 1019},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 20, offset: 1021},
							name: "orToken",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 28, offset: 1029},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 50, col: 30, offset: 1031},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 32, offset: 1033},
								name: "searchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "searchTerm",
			pos:  position{line: 52, col: 1, offset: 1063},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1078},
				run: (*parser).callonsearchTerm1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 53, col: 5, offset: 1078},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 11, offset: 1084},
								name: "searchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 53, col: 24, offset: 1097},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 53, col: 29, offset: 1102},
								expr: &ruleRefExpr{
									pos:  position{line: 53, col: 29, offset: 1102},
									name: "andedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andedSearchTerm",
			pos:  position{line: 57, col: 1, offset: 1172},
			expr: &actionExpr{
				pos: position{line: 57, col: 19, offset: 1190},
				run: (*parser).callonandedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 57, col: 19, offset: 1190},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 57, col: 19, offset: 1190},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 21, offset: 1192},
							expr: &seqExpr{
								pos: position{line: 57, col: 22, offset: 1193},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 57, col: 22, offset: 1193},
										name: "andToken",
									},
									&ruleRefExpr{
										pos:  position{line: 57, col: 31, offset: 1202},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 35, offset: 1206},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 37, offset: 1208},
								name: "searchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "searchFactor",
			pos:  position{line: 59, col: 1, offset: 1240},
			expr: &choiceExpr{
				pos: position{line: 60, col: 5, offset: 1257},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1257},
						run: (*parser).callonsearchFactor2,
						expr: &seqExpr{
							pos: position{line: 60, col: 5, offset: 1257},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 60, col: 6, offset: 1258},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 60, col: 6, offset: 1258},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 60, col: 6, offset: 1258},
													name: "notToken",
												},
												&ruleRefExpr{
													pos:  position{line: 60, col: 15, offset: 1267},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 60, col: 19, offset: 1271},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 60, col: 19, offset: 1271},
													val:        "!",
													ignoreCase: false,
												},
												&zeroOrOneExpr{
													pos: position{line: 60, col: 23, offset: 1275},
													expr: &ruleRefExpr{
														pos:  position{line: 60, col: 23, offset: 1275},
														name: "_",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 60, col: 27, offset: 1279},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 60, col: 29, offset: 1281},
										name: "searchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1340},
						run: (*parser).callonsearchFactor14,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1340},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 63, col: 5, offset: 1340},
									expr: &litMatcher{
										pos:        position{line: 63, col: 7, offset: 1342},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 63, col: 12, offset: 1347},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 14, offset: 1349},
										name: "searchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1382},
						run: (*parser).callonsearchFactor20,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 1382},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 64, col: 5, offset: 1382},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 64, col: 9, offset: 1386},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 9, offset: 1386},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 12, offset: 1389},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 17, offset: 1394},
										name: "searchExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 64, col: 28, offset: 1405},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 28, offset: 1405},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 64, col: 31, offset: 1408},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchPred",
			pos:  position{line: 66, col: 1, offset: 1434},
			expr: &choiceExpr{
				pos: position{line: 67, col: 5, offset: 1449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1449},
						run: (*parser).callonsearchPred2,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 67, col: 5, offset: 1449},
									val:        "*",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 67, col: 9, offset: 1453},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 9, offset: 1453},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 12, offset: 1456},
									label: "fieldComparator",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 28, offset: 1472},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 67, col: 42, offset: 1486},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 42, offset: 1486},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 45, offset: 1489},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 47, offset: 1491},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1575},
						run: (*parser).callonsearchPred13,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1575},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1575},
									val:        "**",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 70, col: 10, offset: 1580},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 10, offset: 1580},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 70, col: 13, offset: 1583},
									label: "fieldComparator",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 29, offset: 1599},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 70, col: 43, offset: 1613},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 43, offset: 1613},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 70, col: 46, offset: 1616},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 48, offset: 1618},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 1701},
						run: (*parser).callonsearchPred24,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 1701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 73, col: 5, offset: 1701},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 7, offset: 1703},
										name: "fieldExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 17, offset: 1713},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 17, offset: 1713},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 20, offset: 1716},
									label: "fieldComparator",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 36, offset: 1732},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 50, offset: 1746},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 50, offset: 1746},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 53, offset: 1749},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 55, offset: 1751},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1833},
						run: (*parser).callonsearchPred36,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 1833},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 1833},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 1835},
										name: "searchValue",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 76, col: 19, offset: 1847},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 19, offset: 1847},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 22, offset: 1850},
									name: "inToken",
								},
								&zeroOrOneExpr{
									pos: position{line: 76, col: 30, offset: 1858},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 30, offset: 1858},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 76, col: 33, offset: 1861},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 1926},
						run: (*parser).callonsearchPred46,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 1926},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 79, col: 5, offset: 1926},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 7, offset: 1928},
										name: "searchValue",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 79, col: 19, offset: 1940},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 19, offset: 1940},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 22, offset: 1943},
									name: "inToken",
								},
								&zeroOrOneExpr{
									pos: position{line: 79, col: 30, offset: 1951},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 30, offset: 1951},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 79, col: 33, offset: 1954},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 35, offset: 1956},
										name: "fieldReference",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2030},
						run: (*parser).callonsearchPred57,
						expr: &labeledExpr{
							pos:   position{line: 82, col: 5, offset: 2030},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 7, offset: 2032},
								name: "searchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2113},
						run: (*parser).callonsearchPred60,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2113},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 85, col: 5, offset: 2113},
									expr: &seqExpr{
										pos: position{line: 85, col: 7, offset: 2115},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 85, col: 8, offset: 2116},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 85, col: 24, offset: 2132},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 85, col: 28, offset: 2136},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 30, offset: 2138},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchLiteral",
			pos:  position{line: 89, col: 1, offset: 2235},
			expr: &choiceExpr{
				pos: position{line: 90, col: 5, offset: 2253},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2253},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2271},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2289},
						name: "PortLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2305},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2323},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2342},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2509},
						run: (*parser).callonsearchLiteral8,
						expr: &seqExpr{
							pos: position{line: 99, col: 5, offset: 2509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 99, col: 5, offset: 2509},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 7, offset: 2511},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 99, col: 22, offset: 2526},
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 23, offset: 2527},
										name: "searchWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 101, col: 5, offset: 2561},
						run: (*parser).callonsearchLiteral14,
						expr: &seqExpr{
							pos: position{line: 101, col: 5, offset: 2561},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 5, offset: 2561},
									expr: &seqExpr{
										pos: position{line: 101, col: 7, offset: 2563},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 101, col: 7, offset: 2563},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 101, col: 22, offset: 2578},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 101, col: 25, offset: 2581},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 27, offset: 2583},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 2620},
						run: (*parser).callonsearchLiteral22,
						expr: &seqExpr{
							pos: position{line: 102, col: 5, offset: 2620},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 102, col: 5, offset: 2620},
									expr: &seqExpr{
										pos: position{line: 102, col: 7, offset: 2622},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 102, col: 7, offset: 2622},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 102, col: 22, offset: 2637},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 102, col: 25, offset: 2640},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 27, offset: 2642},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchValue",
			pos:  position{line: 105, col: 1, offset: 2674},
			expr: &choiceExpr{
				pos: position{line: 106, col: 5, offset: 2690},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 2690},
						name: "searchLiteral",
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 2708},
						run: (*parser).callonsearchValue3,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 2708},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 107, col: 5, offset: 2708},
									expr: &seqExpr{
										pos: position{line: 107, col: 7, offset: 2710},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 107, col: 8, offset: 2711},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 24, offset: 2727},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 107, col: 27, offset: 2730},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 29, offset: 2732},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 111, col: 1, offset: 2795},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 2813},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 112, col: 5, offset: 2813},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 112, col: 7, offset: 2815},
						name: "quotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 116, col: 1, offset: 2880},
			expr: &actionExpr{
				pos: position{line: 117, col: 5, offset: 2898},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 117, col: 5, offset: 2898},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 117, col: 7, offset: 2900},
						name: "reString",
					},
				},
			},
		},
		{
			name: "PortLiteral",
			pos:  position{line: 121, col: 1, offset: 2961},
			expr: &actionExpr{
				pos: position{line: 122, col: 5, offset: 2977},
				run: (*parser).callonPortLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 122, col: 5, offset: 2977},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 122, col: 7, offset: 2979},
						name: "port",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 126, col: 1, offset: 3034},
			expr: &choiceExpr{
				pos: position{line: 127, col: 5, offset: 3052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3052},
						run: (*parser).callonSubnetLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 127, col: 5, offset: 3052},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 7, offset: 3054},
								name: "ip6subnet",
							},
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3116},
						run: (*parser).callonSubnetLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 130, col: 5, offset: 3116},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 7, offset: 3118},
								name: "subnet",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 134, col: 1, offset: 3174},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 3193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 3193},
						run: (*parser).callonAddressLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 135, col: 5, offset: 3193},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 7, offset: 3195},
								name: "ip6addr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 3254},
						run: (*parser).callonAddressLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 138, col: 5, offset: 3254},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 7, offset: 3256},
								name: "addr",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 142, col: 1, offset: 3309},
			expr: &actionExpr{
				pos: position{line: 143, col: 5, offset: 3326},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 143, col: 5, offset: 3326},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 143, col: 7, offset: 3328},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 147, col: 1, offset: 3389},
			expr: &actionExpr{
				pos: position{line: 148, col: 5, offset: 3408},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 5, offset: 3408},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 148, col: 7, offset: 3410},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 152, col: 1, offset: 3470},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 3489},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 3489},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 153, col: 5, offset: 3489},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 3554},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 154, col: 5, offset: 3554},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 156, col: 1, offset: 3617},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 3633},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 157, col: 5, offset: 3633},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "searchKeywords",
			pos:  position{line: 159, col: 1, offset: 3691},
			expr: &choiceExpr{
				pos: position{line: 160, col: 5, offset: 3710},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 160, col: 5, offset: 3710},
						name: "andToken",
					},
					&ruleRefExpr{
						pos:  position{line: 161, col: 5, offset: 3723},
						name: "orToken",
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 3735},
						name: "inToken",
					},
				},
			},
		},
		{
			name: "procList",
			pos:  position{line: 164, col: 1, offset: 3744},
			expr: &actionExpr{
				pos: position{line: 165, col: 5, offset: 3757},
				run: (*parser).callonprocList1,
				expr: &seqExpr{
					pos: position{line: 165, col: 5, offset: 3757},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 165, col: 5, offset: 3757},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 165, col: 11, offset: 3763},
								name: "procChain",
							},
						},
						&labeledExpr{
							pos:   position{line: 165, col: 21, offset: 3773},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 165, col: 26, offset: 3778},
								expr: &ruleRefExpr{
									pos:  position{line: 165, col: 26, offset: 3778},
									name: "parallelChain",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parallelChain",
			pos:  position{line: 174, col: 1, offset: 4002},
			expr: &actionExpr{
				pos: position{line: 175, col: 5, offset: 4020},
				run: (*parser).callonparallelChain1,
				expr: &seqExpr{
					pos: position{line: 175, col: 5, offset: 4020},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 175, col: 5, offset: 4020},
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 5, offset: 4020},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 175, col: 8, offset: 4023},
							val:        ";",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 175, col: 12, offset: 4027},
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 12, offset: 4027},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 175, col: 15, offset: 4030},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 18, offset: 4033},
								name: "procChain",
							},
						},
					},
				},
			},
		},
		{
			name: "proc",
			pos:  position{line: 177, col: 1, offset: 4083},
			expr: &choiceExpr{
				pos: position{line: 178, col: 5, offset: 4092},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 178, col: 5, offset: 4092},
						name: "simpleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 5, offset: 4107},
						name: "reduceProc",
					},
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 4122},
						run: (*parser).callonproc4,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 4122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 180, col: 5, offset: 4122},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 180, col: 9, offset: 4126},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 9, offset: 4126},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 12, offset: 4129},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 17, offset: 4134},
										name: "procList",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 180, col: 26, offset: 4143},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 26, offset: 4143},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 180, col: 29, offset: 4146},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByKeys",
			pos:  position{line: 184, col: 1, offset: 4182},
			expr: &actionExpr{
				pos: position{line: 185, col: 5, offset: 4198},
				run: (*parser).callongroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 185, col: 5, offset: 4198},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 5, offset: 4198},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 11, offset: 4204},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 13, offset: 4206},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 19, offset: 4212},
								name: "groupByKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 30, offset: 4223},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 35, offset: 4228},
								expr: &actionExpr{
									pos: position{line: 185, col: 36, offset: 4229},
									run: (*parser).callongroupByKeys9,
									expr: &seqExpr{
										pos: position{line: 185, col: 36, offset: 4229},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 185, col: 36, offset: 4229},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 185, col: 39, offset: 4232},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 185, col: 43, offset: 4236},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 185, col: 46, offset: 4239},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 185, col: 49, offset: 4242},
													name: "groupByKey",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupByKey",
			pos:  position{line: 190, col: 1, offset: 4331},
			expr: &choiceExpr{
				pos: position{line: 191, col: 5, offset: 4346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 4346},
						name: "ExpressionAssignment",
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 4371},
						run: (*parser).callongroupByKey3,
						expr: &labeledExpr{
							pos:   position{line: 192, col: 5, offset: 4371},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 11, offset: 4377},
								name: "fieldExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "everyDur",
			pos:  position{line: 195, col: 1, offset: 4443},
			expr: &actionExpr{
				pos: position{line: 196, col: 5, offset: 4456},
				run: (*parser).calloneveryDur1,
				expr: &seqExpr{
					pos: position{line: 196, col: 5, offset: 4456},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 196, col: 5, offset: 4456},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 14, offset: 4465},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 16, offset: 4467},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 20, offset: 4471},
								name: "duration",
							},
						},
					},
				},
			},
		},
		{
			name: "equalityToken",
			pos:  position{line: 198, col: 1, offset: 4501},
			expr: &choiceExpr{
				pos: position{line: 199, col: 5, offset: 4519},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 4519},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 4538},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "andToken",
			pos:  position{line: 201, col: 1, offset: 4556},
			expr: &actionExpr{
				pos: position{line: 201, col: 12, offset: 4567},
				run: (*parser).callonandToken1,
				expr: &litMatcher{
					pos:        position{line: 201, col: 12, offset: 4567},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "orToken",
			pos:  position{line: 202, col: 1, offset: 4605},
			expr: &actionExpr{
				pos: position{line: 202, col: 11, offset: 4615},
				run: (*parser).callonorToken1,
				expr: &litMatcher{
					pos:        position{line: 202, col: 11, offset: 4615},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "inToken",
			pos:  position{line: 203, col: 1, offset: 4652},
			expr: &actionExpr{
				pos: position{line: 203, col: 11, offset: 4662},
				run: (*parser).calloninToken1,
				expr: &litMatcher{
					pos:        position{line: 203, col: 11, offset: 4662},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "notToken",
			pos:  position{line: 204, col: 1, offset: 4699},
			expr: &actionExpr{
				pos: position{line: 204, col: 12, offset: 4710},
				run: (*parser).callonnotToken1,
				expr: &litMatcher{
					pos:        position{line: 204, col: 12, offset: 4710},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldName",
			pos:  position{line: 206, col: 1, offset: 4749},
			expr: &actionExpr{
				pos: position{line: 206, col: 13, offset: 4761},
				run: (*parser).callonfieldName1,
				expr: &seqExpr{
					pos: position{line: 206, col: 13, offset: 4761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 206, col: 13, offset: 4761},
							name: "fieldNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 206, col: 28, offset: 4776},
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 28, offset: 4776},
								name: "fieldNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "fieldNameStart",
			pos:  position{line: 208, col: 1, offset: 4823},
			expr: &charClassMatcher{
				pos:        position{line: 208, col: 18, offset: 4840},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "fieldNameRest",
			pos:  position{line: 209, col: 1, offset: 4851},
			expr: &choiceExpr{
				pos: position{line: 209, col: 17, offset: 4867},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 17, offset: 4867},
						name: "fieldNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 209, col: 34, offset: 4884},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "fieldReference",
			pos:  position{line: 211, col: 1, offset: 4891},
			expr: &actionExpr{
				pos: position{line: 212, col: 4, offset: 4909},
				run: (*parser).callonfieldReference1,
				expr: &seqExpr{
					pos: position{line: 212, col: 4, offset: 4909},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 212, col: 4, offset: 4909},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 9, offset: 4914},
								name: "fieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 212, col: 19, offset: 4924},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 212, col: 26, offset: 4931},
								expr: &choiceExpr{
									pos: position{line: 213, col: 8, offset: 4940},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 213, col: 8, offset: 4940},
											run: (*parser).callonfieldReference8,
											expr: &seqExpr{
												pos: position{line: 213, col: 8, offset: 4940},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 213, col: 8, offset: 4940},
														val:        ".",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 213, col: 12, offset: 4944},
														label: "field",
														expr: &ruleRefExpr{
															pos:  position{line: 213, col: 18, offset: 4950},
															name: "fieldName",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 214, col: 8, offset: 5031},
											run: (*parser).callonfieldReference13,
											expr: &seqExpr{
												pos: position{line: 214, col: 8, offset: 5031},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 214, col: 8, offset: 5031},
														val:        "[",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 214, col: 12, offset: 5035},
														label: "index",
														expr: &ruleRefExpr{
															pos:  position{line: 214, col: 18, offset: 5041},
															name: "suint",
														},
													},
													&litMatcher{
														pos:        position{line: 214, col: 24, offset: 5047},
														val:        "]",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fieldExpr",
			pos:  position{line: 219, col: 1, offset: 5163},
			expr: &choiceExpr{
				pos: position{line: 220, col: 5, offset: 5177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 220, col: 5, offset: 5177},
						run: (*parser).callonfieldExpr2,
						expr: &seqExpr{
							pos: position{line: 220, col: 5, offset: 5177},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 220, col: 5, offset: 5177},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 8, offset: 5180},
										name: "fieldOp",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 220, col: 16, offset: 5188},
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 16, offset: 5188},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 220, col: 19, offset: 5191},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 220, col: 23, offset: 5195},
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 23, offset: 5195},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 220, col: 26, offset: 5198},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 32, offset: 5204},
										name: "fieldReference",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 220, col: 47, offset: 5219},
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 47, offset: 5219},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 220, col: 50, offset: 5222},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 5, offset: 5286},
						name: "fieldReference",
					},
				},
			},
		},
		{
			name: "fieldOp",
			pos:  position{line: 225, col: 1, offset: 5302},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 5314},
				run: (*parser).callonfieldOp1,
				expr: &litMatcher{
					pos:        position{line: 226, col: 5, offset: 5314},
					val:        "len",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldExprList",
			pos:  position{line: 228, col: 1, offset: 5344},
			expr: &actionExpr{
				pos: position{line: 229, col: 5, offset: 5362},
				run: (*parser).callonfieldExprList1,
				expr: &seqExpr{
					pos: position{line: 229, col: 5, offset: 5362},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 229, col: 5, offset: 5362},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 11, offset: 5368},
								name: "fieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 21, offset: 5378},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 229, col: 26, offset: 5383},
								expr: &seqExpr{
									pos: position{line: 229, col: 27, offset: 5384},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 229, col: 27, offset: 5384},
											expr: &ruleRefExpr{
												pos:  position{line: 229, col: 27, offset: 5384},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 229, col: 30, offset: 5387},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 229, col: 34, offset: 5391},
											expr: &ruleRefExpr{
												pos:  position{line: 229, col: 34, offset: 5391},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 229, col: 37, offset: 5394},
											name: "fieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fieldRefDotOnly",
			pos:  position{line: 239, col: 1, offset: 5589},
			expr: &actionExpr{
				pos: position{line: 240, col: 5, offset: 5609},
				run: (*parser).callonfieldRefDotOnly1,
				expr: &seqExpr{
					pos: position{line: 240, col: 5, offset: 5609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 240, col: 5, offset: 5609},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 10, offset: 5614},
								name: "fieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 240, col: 20, offset: 5624},
							label: "refs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 240, col: 25, offset: 5629},
								expr: &seqExpr{
									pos: position{line: 240, col: 26, offset: 5630},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 240, col: 26, offset: 5630},
											val:        ".",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 240, col: 30, offset: 5634},
											label: "field",
											expr: &ruleRefExpr{
												pos:  position{line: 240, col: 36, offset: 5640},
												name: "fieldName",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "countOp",
			pos:  position{line: 242, col: 1, offset: 5684},
			expr: &actionExpr{
				pos: position{line: 243, col: 5, offset: 5696},
				run: (*parser).calloncountOp1,
				expr: &litMatcher{
					pos:        position{line: 243, col: 5, offset: 5696},
					val:        "count",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldReducerOp",
			pos:  position{line: 245, col: 1, offset: 5730},
			expr: &choiceExpr{
				pos: position{line: 246, col: 5, offset: 5749},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 5749},
						run: (*parser).callonfieldReducerOp2,
						expr: &litMatcher{
							pos:        position{line: 246, col: 5, offset: 5749},
							val:        "sum",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 247, col: 5, offset: 5783},
						run: (*parser).callonfieldReducerOp4,
						expr: &litMatcher{
							pos:        position{line: 247, col: 5, offset: 5783},
							val:        "avg",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 248, col: 5, offset: 5817},
						run: (*parser).callonfieldReducerOp6,
						expr: &litMatcher{
							pos:        position{line: 248, col: 5, offset: 5817},
							val:        "stdev",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 5854},
						run: (*parser).callonfieldReducerOp8,
						expr: &litMatcher{
							pos:        position{line: 249, col: 5, offset: 5854},
							val:        "sd",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 5890},
						run: (*parser).callonfieldReducerOp10,
						expr: &litMatcher{
							pos:        position{line: 250, col: 5, offset: 5890},
							val:        "var",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 5924},
						run: (*parser).callonfieldReducerOp12,
						expr: &litMatcher{
							pos:        position{line: 251, col: 5, offset: 5924},
							val:        "entropy",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 5965},
						run: (*parser).callonfieldReducerOp14,
						expr: &litMatcher{
							pos:        position{line: 252, col: 5, offset: 5965},
							val:        "min",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 5999},
						run: (*parser).callonfieldReducerOp16,
						expr: &litMatcher{
							pos:        position{line: 253, col: 5, offset: 5999},
							val:        "max",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 6033},
						run: (*parser).callonfieldReducerOp18,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 6033},
							val:        "first",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 5, offset: 6071},
						run: (*parser).callonfieldReducerOp20,
						expr: &litMatcher{
							pos:        position{line: 255, col: 5, offset: 6071},
							val:        "last",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 6107},
						run: (*parser).callonfieldReducerOp22,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 6107},
							val:        "countdistinct",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "paddedFieldExpr",
			pos:  position{line: 258, col: 1, offset: 6157},
			expr: &actionExpr{
				pos: position{line: 258, col: 19, offset: 6175},
				run: (*parser).callonpaddedFieldExpr1,
				expr: &seqExpr{
					pos: position{line: 258, col: 19, offset: 6175},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 258, col: 19, offset: 6175},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 19, offset: 6175},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 258, col: 22, offset: 6178},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 28, offset: 6184},
								name: "fieldExpr",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 258, col: 38, offset: 6194},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 38, offset: 6194},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "countReducer",
			pos:  position{line: 260, col: 1, offset: 6220},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 6237},
				run: (*parser).calloncountReducer1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 6237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 6237},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 8, offset: 6240},
								name: "countOp",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 261, col: 16, offset: 6248},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 16, offset: 6248},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 19, offset: 6251},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 261, col: 23, offset: 6255},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 261, col: 29, offset: 6261},
								expr: &ruleRefExpr{
									pos:  position{line: 261, col: 29, offset: 6261},
									name: "paddedFieldExpr",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 261, col: 47, offset: 6279},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 47, offset: 6279},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 50, offset: 6282},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldReducer",
			pos:  position{line: 265, col: 1, offset: 6341},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 6358},
				run: (*parser).callonfieldReducer1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 6358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 6358},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 8, offset: 6361},
								name: "fieldReducerOp",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 23, offset: 6376},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 23, offset: 6376},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 26, offset: 6379},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 30, offset: 6383},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 30, offset: 6383},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 33, offset: 6386},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 39, offset: 6392},
								name: "fieldExpr",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 50, offset: 6403},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 50, offset: 6403},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 53, offset: 6406},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reduceProc",
			pos:  position{line: 270, col: 1, offset: 6473},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 6488},
				run: (*parser).callonreduceProc1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 6488},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 5, offset: 6488},
							label: "every",
							expr: &zeroOrOneExpr{
								pos: position{line: 271, col: 11, offset: 6494},
								expr: &seqExpr{
									pos: position{line: 271, col: 12, offset: 6495},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 12, offset: 6495},
											name: "everyDur",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 21, offset: 6504},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 25, offset: 6508},
							label: "reducers",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 34, offset: 6517},
								name: "reducerList",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 46, offset: 6529},
							label: "keys",
							expr: &zeroOrOneExpr{
								pos: position{line: 271, col: 51, offset: 6534},
								expr: &seqExpr{
									pos: position{line: 271, col: 52, offset: 6535},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 52, offset: 6535},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 54, offset: 6537},
											name: "groupByKeys",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 68, offset: 6551},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 271, col: 74, offset: 6557},
								expr: &ruleRefExpr{
									pos:  position{line: 271, col: 74, offset: 6557},
									name: "procLimitArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reducerExpr",
			pos:  position{line: 289, col: 1, offset: 6913},
			expr: &choiceExpr{
				pos: position{line: 290, col: 5, offset: 6929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 6929},
						run: (*parser).callonreducerExpr2,
						expr: &seqExpr{
							pos: position{line: 290, col: 5, offset: 6929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 290, col: 5, offset: 6929},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 11, offset: 6935},
										name: "fieldName",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 290, col: 21, offset: 6945},
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 21, offset: 6945},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 290, col: 24, offset: 6948},
									val:        "=",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 290, col: 28, offset: 6952},
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 28, offset: 6952},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 290, col: 31, offset: 6955},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 33, offset: 6957},
										name: "reducer",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 7020},
						name: "reducer",
					},
				},
			},
		},
		{
			name: "reducer",
			pos:  position{line: 295, col: 1, offset: 7029},
			expr: &choiceExpr{
				pos: position{line: 296, col: 5, offset: 7041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 296, col: 5, offset: 7041},
						name: "countReducer",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 7058},
						name: "fieldReducer",
					},
				},
			},
		},
		{
			name: "reducerList",
			pos:  position{line: 299, col: 1, offset: 7072},
			expr: &actionExpr{
				pos: position{line: 300, col: 5, offset: 7088},
				run: (*parser).callonreducerList1,
				expr: &seqExpr{
					pos: position{line: 300, col: 5, offset: 7088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 300, col: 5, offset: 7088},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 11, offset: 7094},
								name: "reducerExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 23, offset: 7106},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 300, col: 28, offset: 7111},
								expr: &seqExpr{
									pos: position{line: 300, col: 29, offset: 7112},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 300, col: 29, offset: 7112},
											expr: &ruleRefExpr{
												pos:  position{line: 300, col: 29, offset: 7112},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 300, col: 32, offset: 7115},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 300, col: 36, offset: 7119},
											expr: &ruleRefExpr{
												pos:  position{line: 300, col: 36, offset: 7119},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 300, col: 39, offset: 7122},
											name: "reducerExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleProc",
			pos:  position{line: 308, col: 1, offset: 7319},
			expr: &choiceExpr{
				pos: position{line: 309, col: 5, offset: 7334},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 309, col: 5, offset: 7334},
						name: "sort",
					},
					&ruleRefExpr{
						pos:  position{line: 310, col: 5, offset: 7343},
						name: "top",
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 5, offset: 7351},
						name: "cut",
					},
					&ruleRefExpr{
						pos:  position{line: 312, col: 5, offset: 7359},
						name: "head",
					},
					&ruleRefExpr{
						pos:  position{line: 313, col: 5, offset: 7368},
						name: "tail",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 5, offset: 7377},
						name: "filter",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 7388},
						name: "uniq",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 7397},
						name: "put",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 5, offset: 7405},
						name: "rename",
					},
				},
			},
		},
		{
			name: "sort",
			pos:  position{line: 319, col: 1, offset: 7413},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 7422},
				run: (*parser).callonsort1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 7422},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 7422},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 320, col: 13, offset: 7430},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 18, offset: 7435},
								name: "sortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 27, offset: 7444},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 32, offset: 7449},
								expr: &actionExpr{
									pos: position{line: 320, col: 33, offset: 7450},
									run: (*parser).callonsort8,
									expr: &seqExpr{
										pos: position{line: 320, col: 33, offset: 7450},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 320, col: 33, offset: 7450},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 320, col: 35, offset: 7452},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 37, offset: 7454},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArgs",
			pos:  position{line: 324, col: 1, offset: 7531},
			expr: &zeroOrMoreExpr{
				pos: position{line: 324, col: 12, offset: 7542},
				expr: &actionExpr{
					pos: position{line: 324, col: 13, offset: 7543},
					run: (*parser).callonsortArgs2,
					expr: &seqExpr{
						pos: position{line: 324, col: 13, offset: 7543},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 324, col: 13, offset: 7543},
								name: "_",
							},
							&labeledExpr{
								pos:   position{line: 324, col: 15, offset: 7545},
								label: "a",
								expr: &ruleRefExpr{
									pos:  position{line: 324, col: 17, offset: 7547},
									name: "sortArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArg",
			pos:  position{line: 326, col: 1, offset: 7576},
			expr: &choiceExpr{
				pos: position{line: 327, col: 5, offset: 7588},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 7588},
						run: (*parser).callonsortArg2,
						expr: &litMatcher{
							pos:        position{line: 327, col: 5, offset: 7588},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 328, col: 5, offset: 7631},
						run: (*parser).callonsortArg4,
						expr: &seqExpr{
							pos: position{line: 328, col: 5, offset: 7631},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 328, col: 5, offset: 7631},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 328, col: 14, offset: 7640},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 328, col: 16, offset: 7642},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 328, col: 23, offset: 7649},
										run: (*parser).callonsortArg9,
										expr: &choiceExpr{
											pos: position{line: 328, col: 24, offset: 7650},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 328, col: 24, offset: 7650},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 328, col: 34, offset: 7660},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "top",
			pos:  position{line: 330, col: 1, offset: 7742},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 7750},
				run: (*parser).callontop1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 7750},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 7750},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 331, col: 12, offset: 7757},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 18, offset: 7763},
								expr: &actionExpr{
									pos: position{line: 331, col: 19, offset: 7764},
									run: (*parser).callontop6,
									expr: &seqExpr{
										pos: position{line: 331, col: 19, offset: 7764},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 331, col: 19, offset: 7764},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 331, col: 21, offset: 7766},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 331, col: 23, offset: 7768},
													name: "unsignedInteger",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 58, offset: 7803},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 64, offset: 7809},
								expr: &seqExpr{
									pos: position{line: 331, col: 65, offset: 7810},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 331, col: 65, offset: 7810},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 331, col: 67, offset: 7812},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 78, offset: 7823},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 83, offset: 7828},
								expr: &actionExpr{
									pos: position{line: 331, col: 84, offset: 7829},
									run: (*parser).callontop18,
									expr: &seqExpr{
										pos: position{line: 331, col: 84, offset: 7829},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 331, col: 84, offset: 7829},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 331, col: 86, offset: 7831},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 331, col: 88, offset: 7833},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "procLimitArg",
			pos:  position{line: 335, col: 1, offset: 7922},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 7939},
				run: (*parser).callonprocLimitArg1,
				expr: &seqExpr{
					pos: position{line: 336, col: 5, offset: 7939},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 336, col: 5, offset: 7939},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 336, col: 7, offset: 7941},
							val:        "-limit",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 16, offset: 7950},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 18, offset: 7952},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 24, offset: 7958},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "cutArg",
			pos:  position{line: 338, col: 1, offset: 7997},
			expr: &zeroOrMoreExpr{
				pos: position{line: 338, col: 10, offset: 8006},
				expr: &actionExpr{
					pos: position{line: 338, col: 11, offset: 8007},
					run: (*parser).calloncutArg2,
					expr: &seqExpr{
						pos: position{line: 338, col: 11, offset: 8007},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 338, col: 11, offset: 8007},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 338, col: 13, offset: 8009},
								val:        "-c",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "cutAssignment",
			pos:  position{line: 340, col: 1, offset: 8051},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 8069},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 8069},
						name: "FieldAssignment",
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 8089},
						run: (*parser).calloncutAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 342, col: 5, offset: 8089},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 11, offset: 8095},
								name: "fieldRefDotOnly",
							},
						},
					},
				},
			},
		},
		{
			name: "cut",
			pos:  position{line: 346, col: 1, offset: 8165},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 8173},
				run: (*parser).calloncut1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 8173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 8173},
							val:        "cut",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 347, col: 12, offset: 8180},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 16, offset: 8184},
								name: "cutArg",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 23, offset: 8191},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 347, col: 25, offset: 8193},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 31, offset: 8199},
								name: "cutAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 45, offset: 8213},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 347, col: 50, offset: 8218},
								expr: &actionExpr{
									pos: position{line: 347, col: 51, offset: 8219},
									run: (*parser).calloncut11,
									expr: &seqExpr{
										pos: position{line: 347, col: 51, offset: 8219},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 347, col: 51, offset: 8219},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 347, col: 54, offset: 8222},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 347, col: 58, offset: 8226},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 347, col: 61, offset: 8229},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 347, col: 64, offset: 8232},
													name: "cutAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "head",
			pos:  position{line: 348, col: 1, offset: 8309},
			expr: &choiceExpr{
				pos: position{line: 349, col: 5, offset: 8318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 8318},
						run: (*parser).callonhead2,
						expr: &seqExpr{
							pos: position{line: 349, col: 5, offset: 8318},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 349, col: 5, offset: 8318},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 13, offset: 8326},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 349, col: 15, offset: 8328},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 349, col: 21, offset: 8334},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 350, col: 5, offset: 8390},
						run: (*parser).callonhead8,
						expr: &litMatcher{
							pos:        position{line: 350, col: 5, offset: 8390},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "tail",
			pos:  position{line: 351, col: 1, offset: 8430},
			expr: &choiceExpr{
				pos: position{line: 352, col: 5, offset: 8439},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 8439},
						run: (*parser).callontail2,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 8439},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 8439},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 13, offset: 8447},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 15, offset: 8449},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 21, offset: 8455},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 8511},
						run: (*parser).callontail8,
						expr: &litMatcher{
							pos:        position{line: 353, col: 5, offset: 8511},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "filter",
			pos:  position{line: 355, col: 1, offset: 8552},
			expr: &actionExpr{
				pos: position{line: 356, col: 5, offset: 8563},
				run: (*parser).callonfilter1,
				expr: &seqExpr{
					pos: position{line: 356, col: 5, offset: 8563},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 5, offset: 8563},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 15, offset: 8573},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 17, offset: 8575},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 22, offset: 8580},
								name: "searchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "uniq",
			pos:  position{line: 359, col: 1, offset: 8638},
			expr: &choiceExpr{
				pos: position{line: 360, col: 5, offset: 8647},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 8647},
						run: (*parser).callonuniq2,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 8647},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 8647},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 13, offset: 8655},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 360, col: 15, offset: 8657},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 8711},
						run: (*parser).callonuniq7,
						expr: &litMatcher{
							pos:        position{line: 363, col: 5, offset: 8711},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "put",
			pos:  position{line: 367, col: 1, offset: 8766},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 8774},
				run: (*parser).callonput1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 8774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 5, offset: 8774},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 368, col: 12, offset: 8781},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 368, col: 14, offset: 8783},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 20, offset: 8789},
								name: "ExpressionAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 368, col: 41, offset: 8810},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 368, col: 46, offset: 8815},
								expr: &actionExpr{
									pos: position{line: 368, col: 47, offset: 8816},
									run: (*parser).callonput9,
									expr: &seqExpr{
										pos: position{line: 368, col: 47, offset: 8816},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 368, col: 47, offset: 8816},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 368, col: 50, offset: 8819},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 368, col: 54, offset: 8823},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 368, col: 57, offset: 8826},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 368, col: 60, offset: 8829},
													name: "ExpressionAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "rename",
			pos:  position{line: 372, col: 1, offset: 8923},
			expr: &actionExpr{
				pos: position{line: 373, col: 5, offset: 8934},
				run: (*parser).callonrename1,
				expr: &seqExpr{
					pos: position{line: 373, col: 5, offset: 8934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 5, offset: 8934},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 15, offset: 8944},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 17, offset: 8946},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 23, offset: 8952},
								name: "FieldAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 373, col: 39, offset: 8968},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 373, col: 44, offset: 8973},
								expr: &actionExpr{
									pos: position{line: 373, col: 45, offset: 8974},
									run: (*parser).callonrename9,
									expr: &seqExpr{
										pos: position{line: 373, col: 45, offset: 8974},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 373, col: 45, offset: 8974},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 373, col: 48, offset: 8977},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 373, col: 52, offset: 8981},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 373, col: 55, offset: 8984},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 373, col: 58, offset: 8987},
													name: "FieldAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionAssignment",
			pos:  position{line: 375, col: 1, offset: 9065},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 9090},
				run: (*parser).callonExpressionAssignment1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 9090},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 376, col: 5, offset: 9090},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 7, offset: 9092},
								name: "fieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 17, offset: 9102},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 376, col: 20, offset: 9105},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 24, offset: 9109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 27, offset: 9112},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 29, offset: 9114},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldAssignment",
			pos:  position{line: 380, col: 1, offset: 9183},
			expr: &actionExpr{
				pos: position{line: 381, col: 5, offset: 9203},
				run: (*parser).callonFieldAssignment1,
				expr: &seqExpr{
					pos: position{line: 381, col: 5, offset: 9203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 381, col: 5, offset: 9203},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 7, offset: 9205},
								name: "fieldRefDotOnly",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 23, offset: 9221},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 381, col: 26, offset: 9224},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 30, offset: 9228},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 33, offset: 9231},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 35, offset: 9233},
								name: "fieldRefDotOnly",
							},
						},
					},
				},
			},
		},
		{
			name: "PrimaryExpression",
			pos:  position{line: 385, col: 1, offset: 9302},
			expr: &choiceExpr{
				pos: position{line: 386, col: 5, offset: 9324},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 386, col: 5, offset: 9324},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 387, col: 5, offset: 9342},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 5, offset: 9360},
						name: "PortLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 5, offset: 9376},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 390, col: 5, offset: 9394},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 5, offset: 9413},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 5, offset: 9430},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 5, offset: 9449},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 5, offset: 9468},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 395, col: 5, offset: 9484},
						name: "FieldReference",
					},
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 9503},
						run: (*parser).callonPrimaryExpression12,
						expr: &seqExpr{
							pos: position{line: 396, col: 5, offset: 9503},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 396, col: 5, offset: 9503},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 396, col: 9, offset: 9507},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 396, col: 12, offset: 9510},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 396, col: 17, offset: 9515},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 396, col: 28, offset: 9526},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 396, col: 31, offset: 9529},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldReference",
			pos:  position{line: 398, col: 1, offset: 9555},
			expr: &actionExpr{
				pos: position{line: 399, col: 5, offset: 9574},
				run: (*parser).callonFieldReference1,
				expr: &labeledExpr{
					pos:   position{line: 399, col: 5, offset: 9574},
					label: "f",
					expr: &ruleRefExpr{
						pos:  position{line: 399, col: 7, offset: 9576},
						name: "fieldName",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 409, col: 1, offset: 9825},
			expr: &ruleRefExpr{
				pos:  position{line: 409, col: 14, offset: 9838},
				name: "ConditionalExpression",
			},
		},
		{
			name: "ConditionalExpression",
			pos:  position{line: 411, col: 1, offset: 9861},
			expr: &choiceExpr{
				pos: position{line: 412, col: 5, offset: 9887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 412, col: 5, offset: 9887},
						run: (*parser).callonConditionalExpression2,
						expr: &seqExpr{
							pos: position{line: 412, col: 5, offset: 9887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 412, col: 5, offset: 9887},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 412, col: 15, offset: 9897},
										name: "LogicalORExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 35, offset: 9917},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 412, col: 38, offset: 9920},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 42, offset: 9924},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 412, col: 45, offset: 9927},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 412, col: 56, offset: 9938},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 67, offset: 9949},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 412, col: 70, offset: 9952},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 74, offset: 9956},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 412, col: 77, offset: 9959},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 412, col: 88, offset: 9970},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 5, offset: 10062},
						name: "LogicalORExpression",
					},
				},
			},
		},
		{
			name: "LogicalORExpression",
			pos:  position{line: 417, col: 1, offset: 10083},
			expr: &actionExpr{
				pos: position{line: 418, col: 5, offset: 10107},
				run: (*parser).callonLogicalORExpression1,
				expr: &seqExpr{
					pos: position{line: 418, col: 5, offset: 10107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 418, col: 5, offset: 10107},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 11, offset: 10113},
								name: "LogicalANDExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 5, offset: 10138},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 419, col: 10, offset: 10143},
								expr: &seqExpr{
									pos: position{line: 419, col: 11, offset: 10144},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 419, col: 11, offset: 10144},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 14, offset: 10147},
											name: "orToken",
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 22, offset: 10155},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 25, offset: 10158},
											name: "LogicalANDExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalANDExpression",
			pos:  position{line: 423, col: 1, offset: 10243},
			expr: &actionExpr{
				pos: position{line: 424, col: 5, offset: 10268},
				run: (*parser).callonLogicalANDExpression1,
				expr: &seqExpr{
					pos: position{line: 424, col: 5, offset: 10268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 424, col: 5, offset: 10268},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 10274},
								name: "EqualityCompareExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 5, offset: 10304},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 425, col: 10, offset: 10309},
								expr: &seqExpr{
									pos: position{line: 425, col: 11, offset: 10310},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 11, offset: 10310},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 14, offset: 10313},
											name: "andToken",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 23, offset: 10322},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 26, offset: 10325},
											name: "EqualityCompareExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpression",
			pos:  position{line: 429, col: 1, offset: 10415},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 10445},
				run: (*parser).callonEqualityCompareExpression1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 10445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 430, col: 5, offset: 10445},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 10451},
								name: "RelativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 5, offset: 10474},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 10, offset: 10479},
								expr: &seqExpr{
									pos: position{line: 431, col: 11, offset: 10480},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 431, col: 11, offset: 10480},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 431, col: 14, offset: 10483},
											name: "EqualityComparator",
										},
										&ruleRefExpr{
											pos:  position{line: 431, col: 33, offset: 10502},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 431, col: 36, offset: 10505},
											name: "RelativeExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 435, col: 1, offset: 10588},
			expr: &actionExpr{
				pos: position{line: 435, col: 20, offset: 10607},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 435, col: 21, offset: 10608},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 21, offset: 10608},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 435, col: 28, offset: 10615},
							val:        "!~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 435, col: 35, offset: 10622},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 435, col: 41, offset: 10628},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 437, col: 1, offset: 10666},
			expr: &choiceExpr{
				pos: position{line: 438, col: 5, offset: 10689},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 438, col: 5, offset: 10689},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 10710},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 439, col: 5, offset: 10710},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpression",
			pos:  position{line: 441, col: 1, offset: 10747},
			expr: &actionExpr{
				pos: position{line: 442, col: 5, offset: 10770},
				run: (*parser).callonRelativeExpression1,
				expr: &seqExpr{
					pos: position{line: 442, col: 5, offset: 10770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 442, col: 5, offset: 10770},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 11, offset: 10776},
								name: "AdditiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 5, offset: 10799},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 443, col: 10, offset: 10804},
								expr: &seqExpr{
									pos: position{line: 443, col: 11, offset: 10805},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 443, col: 11, offset: 10805},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 14, offset: 10808},
											name: "RelativeOperator",
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 31, offset: 10825},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 34, offset: 10828},
											name: "AdditiveExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 447, col: 1, offset: 10911},
			expr: &actionExpr{
				pos: position{line: 447, col: 20, offset: 10930},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 447, col: 21, offset: 10931},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 447, col: 21, offset: 10931},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 447, col: 28, offset: 10938},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 447, col: 34, offset: 10944},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 447, col: 41, offset: 10951},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpression",
			pos:  position{line: 449, col: 1, offset: 10988},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 11011},
				run: (*parser).callonAdditiveExpression1,
				expr: &seqExpr{
					pos: position{line: 450, col: 5, offset: 11011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 450, col: 5, offset: 11011},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 11, offset: 11017},
								name: "MultiplicativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 11046},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 451, col: 10, offset: 11051},
								expr: &seqExpr{
									pos: position{line: 451, col: 11, offset: 11052},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 451, col: 11, offset: 11052},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 451, col: 14, offset: 11055},
											name: "AdditiveOperator",
										},
										&ruleRefExpr{
											pos:  position{line: 451, col: 31, offset: 11072},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 451, col: 34, offset: 11075},
											name: "MultiplicativeExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 455, col: 1, offset: 11164},
			expr: &actionExpr{
				pos: position{line: 455, col: 20, offset: 11183},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 455, col: 21, offset: 11184},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 455, col: 21, offset: 11184},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 455, col: 27, offset: 11190},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpression",
			pos:  position{line: 457, col: 1, offset: 11227},
			expr: &actionExpr{
				pos: position{line: 458, col: 5, offset: 11256},
				run: (*parser).callonMultiplicativeExpression1,
				expr: &seqExpr{
					pos: position{line: 458, col: 5, offset: 11256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 458, col: 5, offset: 11256},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 11, offset: 11262},
								name: "NotExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 5, offset: 11280},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 459, col: 10, offset: 11285},
								expr: &seqExpr{
									pos: position{line: 459, col: 11, offset: 11286},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 459, col: 11, offset: 11286},
											name: "__",
										},
										&labeledExpr{
											pos:   position{line: 459, col: 14, offset: 11289},
											label: "op",
											expr: &ruleRefExpr{
												pos:  position{line: 459, col: 17, offset: 11292},
												name: "MultiplicativeOperator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 459, col: 40, offset: 11315},
											name: "__",
										},
										&labeledExpr{
											pos:   position{line: 459, col: 43, offset: 11318},
											label: "operand",
											expr: &ruleRefExpr{
												pos:  position{line: 459, col: 51, offset: 11326},
												name: "NotExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 463, col: 1, offset: 11404},
			expr: &actionExpr{
				pos: position{line: 463, col: 26, offset: 11429},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 463, col: 27, offset: 11430},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 463, col: 27, offset: 11430},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 33, offset: 11436},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 465, col: 1, offset: 11473},
			expr: &choiceExpr{
				pos: position{line: 466, col: 5, offset: 11491},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 11491},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 11491},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 466, col: 5, offset: 11491},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 466, col: 9, offset: 11495},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 466, col: 12, offset: 11498},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 466, col: 14, offset: 11500},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 469, col: 5, offset: 11568},
						name: "CastExpression",
					},
				},
			},
		},
		{
			name: "CastExpression",
			pos:  position{line: 471, col: 1, offset: 11584},
			expr: &actionExpr{
				pos: position{line: 472, col: 5, offset: 11603},
				run: (*parser).callonCastExpression1,
				expr: &seqExpr{
					pos: position{line: 472, col: 5, offset: 11603},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 11603},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 7, offset: 11605},
								name: "CallExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 22, offset: 11620},
							label: "t",
							expr: &zeroOrOneExpr{
								pos: position{line: 472, col: 24, offset: 11622},
								expr: &actionExpr{
									pos: position{line: 472, col: 25, offset: 11623},
									run: (*parser).callonCastExpression7,
									expr: &seqExpr{
										pos: position{line: 472, col: 25, offset: 11623},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 472, col: 25, offset: 11623},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 472, col: 28, offset: 11626},
												val:        ":",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 472, col: 32, offset: 11630},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 35, offset: 11633},
												label: "ct",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 38, offset: 11636},
													name: "ZngType",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ZngType",
			pos:  position{line: 480, col: 1, offset: 11772},
			expr: &choiceExpr{
				pos: position{line: 481, col: 4, offset: 11783},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 481, col: 4, offset: 11783},
						val:        "bool",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 481, col: 13, offset: 11792},
						val:        "byte",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 481, col: 22, offset: 11801},
						val:        "int16",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 481, col: 32, offset: 11811},
						val:        "uint16",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 481, col: 43, offset: 11822},
						val:        "int32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 481, col: 53, offset: 11832},
						val:        "uint32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 482, col: 4, offset: 11844},
						val:        "int64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 482, col: 14, offset: 11854},
						val:        "uint64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 482, col: 25, offset: 11865},
						val:        "float64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 482, col: 37, offset: 11877},
						val:        "string",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 482, col: 48, offset: 11888},
						val:        "bstring",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 483, col: 4, offset: 11901},
						val:        "ip",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 483, col: 11, offset: 11908},
						val:        "net",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 483, col: 19, offset: 11916},
						val:        "time",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 483, col: 28, offset: 11925},
						val:        "duration",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "CallExpression",
			pos:  position{line: 485, col: 1, offset: 11937},
			expr: &choiceExpr{
				pos: position{line: 486, col: 5, offset: 11956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 486, col: 5, offset: 11956},
						run: (*parser).callonCallExpression2,
						expr: &seqExpr{
							pos: position{line: 486, col: 5, offset: 11956},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 486, col: 5, offset: 11956},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 8, offset: 11959},
										name: "FunctionName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 486, col: 21, offset: 11972},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 486, col: 24, offset: 11975},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 486, col: 28, offset: 11979},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 33, offset: 11984},
										name: "ArgumentList",
									},
								},
								&litMatcher{
									pos:        position{line: 486, col: 46, offset: 11997},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 5, offset: 12060},
						name: "DereferenceExpression",
					},
				},
			},
		},
		{
			name: "FunctionName",
			pos:  position{line: 491, col: 1, offset: 12083},
			expr: &actionExpr{
				pos: position{line: 492, col: 5, offset: 12100},
				run: (*parser).callonFunctionName1,
				expr: &seqExpr{
					pos: position{line: 492, col: 5, offset: 12100},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 492, col: 5, offset: 12100},
							name: "FunctionNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 492, col: 23, offset: 12118},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 23, offset: 12118},
								name: "FunctionNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionNameStart",
			pos:  position{line: 494, col: 1, offset: 12168},
			expr: &charClassMatcher{
				pos:        position{line: 494, col: 21, offset: 12188},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "FunctionNameRest",
			pos:  position{line: 495, col: 1, offset: 12197},
			expr: &choiceExpr{
				pos: position{line: 495, col: 20, offset: 12216},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 495, col: 20, offset: 12216},
						name: "FunctionNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 495, col: 40, offset: 12236},
						val:        "[.0-9]",
						chars:      []rune{'.'},
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 497, col: 1, offset: 12244},
			expr: &choiceExpr{
				pos: position{line: 498, col: 5, offset: 12261},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 498, col: 5, offset: 12261},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 498, col: 5, offset: 12261},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 498, col: 5, offset: 12261},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 11, offset: 12267},
										name: "Expression",
									},
								},
								&labeledExpr{
									pos:   position{line: 498, col: 22, offset: 12278},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 498, col: 27, offset: 12283},
										expr: &actionExpr{
											pos: position{line: 498, col: 28, offset: 12284},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 498, col: 28, offset: 12284},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 498, col: 28, offset: 12284},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 498, col: 31, offset: 12287},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 498, col: 35, offset: 12291},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 498, col: 38, offset: 12294},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 498, col: 40, offset: 12296},
															name: "Expression",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 12412},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 12412},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DereferenceExpression",
			pos:  position{line: 503, col: 1, offset: 12448},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 12474},
				run: (*parser).callonDereferenceExpression1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 12474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 504, col: 5, offset: 12474},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 10, offset: 12479},
								name: "PrimaryExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 5, offset: 12501},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 505, col: 12, offset: 12508},
								expr: &choiceExpr{
									pos: position{line: 506, col: 9, offset: 12518},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 506, col: 9, offset: 12518},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 506, col: 9, offset: 12518},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 506, col: 12, offset: 12521},
													val:        "[",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 506, col: 16, offset: 12525},
													name: "__",
												},
												&labeledExpr{
													pos:   position{line: 506, col: 19, offset: 12528},
													label: "index",
													expr: &ruleRefExpr{
														pos:  position{line: 506, col: 25, offset: 12534},
														name: "Expression",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 506, col: 36, offset: 12545},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 506, col: 39, offset: 12548},
													val:        "]",
													ignoreCase: false,
												},
											},
										},
										&seqExpr{
											pos: position{line: 507, col: 9, offset: 12560},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 507, col: 9, offset: 12560},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 507, col: 12, offset: 12563},
													val:        ".",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 507, col: 16, offset: 12567},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 507, col: 20, offset: 12571},
													run: (*parser).callonDereferenceExpression20,
													expr: &labeledExpr{
														pos:   position{line: 507, col: 20, offset: 12571},
														label: "field",
														expr: &ruleRefExpr{
															pos:  position{line: 507, col: 26, offset: 12577},
															name: "fieldName",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "duration",
			pos:  position{line: 512, col: 1, offset: 12712},
			expr: &choiceExpr{
				pos: position{line: 513, col: 5, offset: 12725},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 513, col: 5, offset: 12725},
						name: "seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 5, offset: 12737},
						name: "minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 515, col: 5, offset: 12749},
						name: "hours",
					},
					&seqExpr{
						pos: position{line: 516, col: 5, offset: 12759},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 516, col: 5, offset: 12759},
								name: "hours",
							},
							&ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 12765},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 516, col: 13, offset: 12767},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 516, col: 19, offset: 12773},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 516, col: 21, offset: 12775},
								name: "minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 5, offset: 12787},
						name: "days",
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 5, offset: 12796},
						name: "weeks",
					},
				},
			},
		},
		{
			name: "sec_abbrev",
			pos:  position{line: 520, col: 1, offset: 12803},
			expr: &choiceExpr{
				pos: position{line: 521, col: 5, offset: 12818},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 521, col: 5, offset: 12818},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 522, col: 5, offset: 12832},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 523, col: 5, offset: 12845},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 524, col: 5, offset: 12856},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 525, col: 5, offset: 12866},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "min_abbrev",
			pos:  position{line: 527, col: 1, offset: 12871},
			expr: &choiceExpr{
				pos: position{line: 528, col: 5, offset: 12886},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 528, col: 5, offset: 12886},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 529, col: 5, offset: 12900},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 530, col: 5, offset: 12913},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 531, col: 5, offset: 12924},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 532, col: 5, offset: 12934},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "hour_abbrev",
			pos:  position{line: 534, col: 1, offset: 12939},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 12955},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 535, col: 5, offset: 12955},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 536, col: 5, offset: 12967},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 537, col: 5, offset: 12977},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 538, col: 5, offset: 12986},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 539, col: 5, offset: 12994},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "day_abbrev",
			pos:  position{line: 541, col: 1, offset: 13002},
			expr: &choiceExpr{
				pos: position{line: 541, col: 14, offset: 13015},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 541, col: 14, offset: 13015},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 541, col: 21, offset: 13022},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 541, col: 27, offset: 13028},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "week_abbrev",
			pos:  position{line: 542, col: 1, offset: 13032},
			expr: &choiceExpr{
				pos: position{line: 542, col: 15, offset: 13046},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 542, col: 15, offset: 13046},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 542, col: 23, offset: 13054},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 542, col: 30, offset: 13061},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 542, col: 36, offset: 13067},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 542, col: 41, offset: 13072},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "seconds",
			pos:  position{line: 544, col: 1, offset: 13077},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 13089},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 13089},
						run: (*parser).callonseconds2,
						expr: &litMatcher{
							pos:        position{line: 545, col: 5, offset: 13089},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 13134},
						run: (*parser).callonseconds4,
						expr: &seqExpr{
							pos: position{line: 546, col: 5, offset: 13134},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 546, col: 5, offset: 13134},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 546, col: 9, offset: 13138},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 546, col: 16, offset: 13145},
									expr: &ruleRefExpr{
										pos:  position{line: 546, col: 16, offset: 13145},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 546, col: 19, offset: 13148},
									name: "sec_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "minutes",
			pos:  position{line: 548, col: 1, offset: 13194},
			expr: &choiceExpr{
				pos: position{line: 549, col: 5, offset: 13206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 13206},
						run: (*parser).callonminutes2,
						expr: &litMatcher{
							pos:        position{line: 549, col: 5, offset: 13206},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 550, col: 5, offset: 13252},
						run: (*parser).callonminutes4,
						expr: &seqExpr{
							pos: position{line: 550, col: 5, offset: 13252},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 550, col: 5, offset: 13252},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 550, col: 9, offset: 13256},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 550, col: 16, offset: 13263},
									expr: &ruleRefExpr{
										pos:  position{line: 550, col: 16, offset: 13263},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 550, col: 19, offset: 13266},
									name: "min_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hours",
			pos:  position{line: 552, col: 1, offset: 13321},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 13331},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 13331},
						run: (*parser).callonhours2,
						expr: &litMatcher{
							pos:        position{line: 553, col: 5, offset: 13331},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 13377},
						run: (*parser).callonhours4,
						expr: &seqExpr{
							pos: position{line: 554, col: 5, offset: 13377},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 554, col: 5, offset: 13377},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 554, col: 9, offset: 13381},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 554, col: 16, offset: 13388},
									expr: &ruleRefExpr{
										pos:  position{line: 554, col: 16, offset: 13388},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 554, col: 19, offset: 13391},
									name: "hour_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "days",
			pos:  position{line: 556, col: 1, offset: 13449},
			expr: &choiceExpr{
				pos: position{line: 557, col: 5, offset: 13458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 13458},
						run: (*parser).callondays2,
						expr: &litMatcher{
							pos:        position{line: 557, col: 5, offset: 13458},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 13506},
						run: (*parser).callondays4,
						expr: &seqExpr{
							pos: position{line: 558, col: 5, offset: 13506},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 558, col: 5, offset: 13506},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 558, col: 9, offset: 13510},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 558, col: 16, offset: 13517},
									expr: &ruleRefExpr{
										pos:  position{line: 558, col: 16, offset: 13517},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 558, col: 19, offset: 13520},
									name: "day_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "weeks",
			pos:  position{line: 560, col: 1, offset: 13580},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 13590},
				run: (*parser).callonweeks1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 13590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 13590},
							label: "num",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 9, offset: 13594},
								name: "number",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 561, col: 16, offset: 13601},
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 16, offset: 13601},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 19, offset: 13604},
							name: "week_abbrev",
						},
					},
				},
			},
		},
		{
			name: "number",
			pos:  position{line: 563, col: 1, offset: 13667},
			expr: &ruleRefExpr{
				pos:  position{line: 563, col: 10, offset: 13676},
				name: "unsignedInteger",
			},
		},
		{
			name: "addr",
			pos:  position{line: 567, col: 1, offset: 13722},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 13731},
				run: (*parser).callonaddr1,
				expr: &labeledExpr{
					pos:   position{line: 568, col: 5, offset: 13731},
					label: "a",
					expr: &seqExpr{
						pos: position{line: 568, col: 8, offset: 13734},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 568, col: 8, offset: 13734},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 568, col: 24, offset: 13750},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 568, col: 28, offset: 13754},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 568, col: 44, offset: 13770},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 568, col: 48, offset: 13774},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 568, col: 64, offset: 13790},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 568, col: 68, offset: 13794},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "port",
			pos:  position{line: 570, col: 1, offset: 13843},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 13852},
				run: (*parser).callonport1,
				expr: &seqExpr{
					pos: position{line: 571, col: 5, offset: 13852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 5, offset: 13852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 571, col: 9, offset: 13856},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 11, offset: 13858},
								name: "suint",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6addr",
			pos:  position{line: 575, col: 1, offset: 14014},
			expr: &choiceExpr{
				pos: position{line: 576, col: 5, offset: 14026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 14026},
						run: (*parser).callonip6addr2,
						expr: &seqExpr{
							pos: position{line: 576, col: 5, offset: 14026},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 576, col: 5, offset: 14026},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 576, col: 7, offset: 14028},
										expr: &ruleRefExpr{
											pos:  position{line: 576, col: 8, offset: 14029},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 576, col: 20, offset: 14041},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 22, offset: 14043},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 579, col: 5, offset: 14107},
						run: (*parser).callonip6addr9,
						expr: &seqExpr{
							pos: position{line: 579, col: 5, offset: 14107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 579, col: 5, offset: 14107},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 579, col: 7, offset: 14109},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 579, col: 11, offset: 14113},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 579, col: 13, offset: 14115},
										expr: &ruleRefExpr{
											pos:  position{line: 579, col: 14, offset: 14116},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 579, col: 25, offset: 14127},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 579, col: 30, offset: 14132},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 579, col: 32, offset: 14134},
										expr: &ruleRefExpr{
											pos:  position{line: 579, col: 33, offset: 14135},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 579, col: 45, offset: 14147},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 579, col: 47, offset: 14149},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 582, col: 5, offset: 14248},
						run: (*parser).callonip6addr22,
						expr: &seqExpr{
							pos: position{line: 582, col: 5, offset: 14248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 582, col: 5, offset: 14248},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 582, col: 10, offset: 14253},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 582, col: 12, offset: 14255},
										expr: &ruleRefExpr{
											pos:  position{line: 582, col: 13, offset: 14256},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 582, col: 25, offset: 14268},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 582, col: 27, offset: 14270},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 14341},
						run: (*parser).callonip6addr30,
						expr: &seqExpr{
							pos: position{line: 585, col: 5, offset: 14341},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 585, col: 5, offset: 14341},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 7, offset: 14343},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 585, col: 11, offset: 14347},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 585, col: 13, offset: 14349},
										expr: &ruleRefExpr{
											pos:  position{line: 585, col: 14, offset: 14350},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 585, col: 25, offset: 14361},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 588, col: 5, offset: 14429},
						run: (*parser).callonip6addr38,
						expr: &litMatcher{
							pos:        position{line: 588, col: 5, offset: 14429},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ip6tail",
			pos:  position{line: 592, col: 1, offset: 14466},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 14478},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 593, col: 5, offset: 14478},
						name: "addr",
					},
					&ruleRefExpr{
						pos:  position{line: 594, col: 5, offset: 14487},
						name: "h16",
					},
				},
			},
		},
		{
			name: "h_append",
			pos:  position{line: 596, col: 1, offset: 14492},
			expr: &actionExpr{
				pos: position{line: 596, col: 12, offset: 14503},
				run: (*parser).callonh_append1,
				expr: &seqExpr{
					pos: position{line: 596, col: 12, offset: 14503},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 596, col: 12, offset: 14503},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 596, col: 16, offset: 14507},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 18, offset: 14509},
								name: "h16",
							},
						},
					},
				},
			},
		},
		{
			name: "h_prepend",
			pos:  position{line: 597, col: 1, offset: 14546},
			expr: &actionExpr{
				pos: position{line: 597, col: 13, offset: 14558},
				run: (*parser).callonh_prepend1,
				expr: &seqExpr{
					pos: position{line: 597, col: 13, offset: 14558},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 597, col: 13, offset: 14558},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 15, offset: 14560},
								name: "h16",
							},
						},
						&litMatcher{
							pos:        position{line: 597, col: 19, offset: 14564},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "subnet",
			pos:  position{line: 599, col: 1, offset: 14602},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 14613},
				run: (*parser).callonsubnet1,
				expr: &seqExpr{
					pos: position{line: 600, col: 5, offset: 14613},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 14613},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 7, offset: 14615},
								name: "addr",
							},
						},
						&litMatcher{
							pos:        position{line: 600, col: 12, offset: 14620},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 600, col: 16, offset: 14624},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 18, offset: 14626},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6subnet",
			pos:  position{line: 604, col: 1, offset: 14710},
			expr: &actionExpr{
				pos: position{line: 605, col: 5, offset: 14724},
				run: (*parser).callonip6subnet1,
				expr: &seqExpr{
					pos: position{line: 605, col: 5, offset: 14724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 5, offset: 14724},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 7, offset: 14726},
								name: "ip6addr",
							},
						},
						&litMatcher{
							pos:        position{line: 605, col: 15, offset: 14734},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 605, col: 19, offset: 14738},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 21, offset: 14740},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "unsignedInteger",
			pos:  position{line: 609, col: 1, offset: 14814},
			expr: &actionExpr{
				pos: position{line: 610, col: 5, offset: 14834},
				run: (*parser).callonunsignedInteger1,
				expr: &labeledExpr{
					pos:   position{line: 610, col: 5, offset: 14834},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 610, col: 7, offset: 14836},
						name: "suint",
					},
				},
			},
		},
		{
			name: "suint",
			pos:  position{line: 612, col: 1, offset: 14871},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 14881},
				run: (*parser).callonsuint1,
				expr: &oneOrMoreExpr{
					pos: position{line: 613, col: 5, offset: 14881},
					expr: &charClassMatcher{
						pos:        position{line: 613, col: 5, offset: 14881},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "integer",
			pos:  position{line: 615, col: 1, offset: 14920},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 14932},
				run: (*parser).calloninteger1,
				expr: &labeledExpr{
					pos:   position{line: 616, col: 5, offset: 14932},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 616, col: 7, offset: 14934},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "sinteger",
			pos:  position{line: 618, col: 1, offset: 14972},
			expr: &actionExpr{
				pos: position{line: 619, col: 5, offset: 14985},
				run: (*parser).callonsinteger1,
				expr: &seqExpr{
					pos: position{line: 619, col: 5, offset: 14985},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 619, col: 5, offset: 14985},
							expr: &charClassMatcher{
								pos:        position{line: 619, col: 5, offset: 14985},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 11, offset: 14991},
							name: "suint",
						},
					},
				},
			},
		},
		{
			name: "double",
			pos:  position{line: 621, col: 1, offset: 15029},
			expr: &actionExpr{
				pos: position{line: 622, col: 5, offset: 15040},
				run: (*parser).callondouble1,
				expr: &labeledExpr{
					pos:   position{line: 622, col: 5, offset: 15040},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 622, col: 7, offset: 15042},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "sdouble",
			pos:  position{line: 626, col: 1, offset: 15089},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 15101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 15101},
						run: (*parser).callonsdouble2,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 15101},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 627, col: 5, offset: 15101},
									expr: &litMatcher{
										pos:        position{line: 627, col: 5, offset: 15101},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 627, col: 10, offset: 15106},
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 10, offset: 15106},
										name: "doubleInteger",
									},
								},
								&litMatcher{
									pos:        position{line: 627, col: 25, offset: 15121},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 627, col: 29, offset: 15125},
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 29, offset: 15125},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 627, col: 42, offset: 15138},
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 42, offset: 15138},
										name: "exponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 15197},
						run: (*parser).callonsdouble13,
						expr: &seqExpr{
							pos: position{line: 630, col: 5, offset: 15197},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 630, col: 5, offset: 15197},
									expr: &litMatcher{
										pos:        position{line: 630, col: 5, offset: 15197},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 630, col: 10, offset: 15202},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 630, col: 14, offset: 15206},
									expr: &ruleRefExpr{
										pos:  position{line: 630, col: 14, offset: 15206},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 630, col: 27, offset: 15219},
									expr: &ruleRefExpr{
										pos:  position{line: 630, col: 27, offset: 15219},
										name: "exponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleInteger",
			pos:  position{line: 634, col: 1, offset: 15275},
			expr: &choiceExpr{
				pos: position{line: 635, col: 5, offset: 15293},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 635, col: 5, offset: 15293},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 636, col: 5, offset: 15301},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 636, col: 5, offset: 15301},
								val:        "[1-9]",
								ranges:     []rune{'1', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 636, col: 11, offset: 15307},
								expr: &charClassMatcher{
									pos:        position{line: 636, col: 11, offset: 15307},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleDigit",
			pos:  position{line: 638, col: 1, offset: 15315},
			expr: &charClassMatcher{
				pos:        position{line: 638, col: 15, offset: 15329},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "exponentPart",
			pos:  position{line: 640, col: 1, offset: 15336},
			expr: &seqExpr{
				pos: position{line: 640, col: 16, offset: 15351},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 640, col: 16, offset: 15351},
						val:        "e",
						ignoreCase: true,
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 21, offset: 15356},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "h16",
			pos:  position{line: 642, col: 1, offset: 15366},
			expr: &actionExpr{
				pos: position{line: 642, col: 7, offset: 15372},
				run: (*parser).callonh161,
				expr: &labeledExpr{
					pos:   position{line: 642, col: 7, offset: 15372},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 642, col: 13, offset: 15378},
						expr: &ruleRefExpr{
							pos:  position{line: 642, col: 13, offset: 15378},
							name: "hexdigit",
						},
					},
				},
			},
		},
		{
			name: "hexdigit",
			pos:  position{line: 644, col: 1, offset: 15420},
			expr: &charClassMatcher{
				pos:        position{line: 644, col: 12, offset: 15431},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "searchWord",
			pos:  position{line: 646, col: 1, offset: 15444},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 15459},
				run: (*parser).callonsearchWord1,
				expr: &labeledExpr{
					pos:   position{line: 647, col: 5, offset: 15459},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 647, col: 11, offset: 15465},
						expr: &ruleRefExpr{
							pos:  position{line: 647, col: 11, offset: 15465},
							name: "searchWordPart",
						},
					},
				},
			},
		},
		{
			name: "searchWordPart",
			pos:  position{line: 649, col: 1, offset: 15515},
			expr: &choiceExpr{
				pos: position{line: 650, col: 5, offset: 15534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 15534},
						run: (*parser).callonsearchWordPart2,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 15534},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 650, col: 5, offset: 15534},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 650, col: 10, offset: 15539},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 650, col: 13, offset: 15542},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 650, col: 13, offset: 15542},
												name: "escapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 650, col: 30, offset: 15559},
												name: "searchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 15596},
						run: (*parser).callonsearchWordPart9,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 15596},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 651, col: 5, offset: 15596},
									expr: &choiceExpr{
										pos: position{line: 651, col: 7, offset: 15598},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 651, col: 7, offset: 15598},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 651, col: 42, offset: 15633},
												name: "ws",
											},
										},
									},
								},
								&anyMatcher{
									line: 651, col: 46, offset: 15637,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "quotedString",
			pos:  position{line: 653, col: 1, offset: 15671},
			expr: &choiceExpr{
				pos: position{line: 654, col: 5, offset: 15688},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 654, col: 5, offset: 15688},
						run: (*parser).callonquotedString2,
						expr: &seqExpr{
							pos: position{line: 654, col: 5, offset: 15688},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 654, col: 5, offset: 15688},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 654, col: 9, offset: 15692},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 654, col: 11, offset: 15694},
										expr: &ruleRefExpr{
											pos:  position{line: 654, col: 11, offset: 15694},
											name: "doubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 654, col: 29, offset: 15712},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 15749},
						run: (*parser).callonquotedString9,
						expr: &seqExpr{
							pos: position{line: 655, col: 5, offset: 15749},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 655, col: 5, offset: 15749},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 655, col: 9, offset: 15753},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 655, col: 11, offset: 15755},
										expr: &ruleRefExpr{
											pos:  position{line: 655, col: 11, offset: 15755},
											name: "singleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 655, col: 29, offset: 15773},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleQuotedChar",
			pos:  position{line: 657, col: 1, offset: 15807},
			expr: &choiceExpr{
				pos: position{line: 658, col: 5, offset: 15828},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 658, col: 5, offset: 15828},
						run: (*parser).callondoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 658, col: 5, offset: 15828},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 658, col: 5, offset: 15828},
									expr: &choiceExpr{
										pos: position{line: 658, col: 7, offset: 15830},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 658, col: 7, offset: 15830},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 13, offset: 15836},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 658, col: 26, offset: 15849,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 15886},
						run: (*parser).callondoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 659, col: 5, offset: 15886},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 659, col: 5, offset: 15886},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 659, col: 10, offset: 15891},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 12, offset: 15893},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleQuotedChar",
			pos:  position{line: 661, col: 1, offset: 15927},
			expr: &choiceExpr{
				pos: position{line: 662, col: 5, offset: 15948},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 15948},
						run: (*parser).callonsingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 15948},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 662, col: 5, offset: 15948},
									expr: &choiceExpr{
										pos: position{line: 662, col: 7, offset: 15950},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 662, col: 7, offset: 15950},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 662, col: 13, offset: 15956},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 662, col: 26, offset: 15969,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 16006},
						run: (*parser).callonsingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 16006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 663, col: 5, offset: 16006},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 663, col: 10, offset: 16011},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 663, col: 12, offset: 16013},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "escapeSequence",
			pos:  position{line: 665, col: 1, offset: 16047},
			expr: &choiceExpr{
				pos: position{line: 666, col: 5, offset: 16066},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 16066},
						run: (*parser).callonescapeSequence2,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 16066},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 666, col: 5, offset: 16066},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 666, col: 9, offset: 16070},
									name: "hexdigit",
								},
								&ruleRefExpr{
									pos:  position{line: 666, col: 18, offset: 16079},
									name: "hexdigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 667, col: 5, offset: 16130},
						name: "singleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 5, offset: 16151},
						name: "unicodeEscape",
					},
				},
			},
		},
		{
			name: "singleCharEscape",
			pos:  position{line: 670, col: 1, offset: 16166},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 16187},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 671, col: 5, offset: 16187},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 672, col: 5, offset: 16195},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 673, col: 5, offset: 16203},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 16212},
						run: (*parser).callonsingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 674, col: 5, offset: 16212},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 675, col: 5, offset: 16241},
						run: (*parser).callonsingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 675, col: 5, offset: 16241},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 16270},
						run: (*parser).callonsingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 676, col: 5, offset: 16270},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 16299},
						run: (*parser).callonsingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 677, col: 5, offset: 16299},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 16328},
						run: (*parser).callonsingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 678, col: 5, offset: 16328},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 16357},
						run: (*parser).callonsingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 679, col: 5, offset: 16357},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "searchEscape",
			pos:  position{line: 681, col: 1, offset: 16383},
			expr: &choiceExpr{
				pos: position{line: 682, col: 5, offset: 16400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 16400},
						run: (*parser).callonsearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 682, col: 5, offset: 16400},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 16428},
						run: (*parser).callonsearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 683, col: 5, offset: 16428},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "unicodeEscape",
			pos:  position{line: 685, col: 1, offset: 16455},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 16473},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 16473},
						run: (*parser).callonunicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 16473},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 5, offset: 16473},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 686, col: 9, offset: 16477},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 686, col: 16, offset: 16484},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 686, col: 16, offset: 16484},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 25, offset: 16493},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 34, offset: 16502},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 43, offset: 16511},
												name: "hexdigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 16574},
						run: (*parser).callonunicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 16574},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 16574},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 689, col: 9, offset: 16578},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 689, col: 13, offset: 16582},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 689, col: 20, offset: 16589},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 689, col: 20, offset: 16589},
												name: "hexdigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 29, offset: 16598},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 29, offset: 16598},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 39, offset: 16608},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 39, offset: 16608},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 49, offset: 16618},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 49, offset: 16618},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 59, offset: 16628},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 59, offset: 16628},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 69, offset: 16638},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 69, offset: 16638},
													name: "hexdigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 689, col: 80, offset: 16649},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reString",
			pos:  position{line: 693, col: 1, offset: 16703},
			expr: &actionExpr{
				pos: position{line: 694, col: 5, offset: 16716},
				run: (*parser).callonreString1,
				expr: &seqExpr{
					pos: position{line: 694, col: 5, offset: 16716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 694, col: 5, offset: 16716},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 694, col: 9, offset: 16720},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 11, offset: 16722},
								name: "reBody",
							},
						},
						&litMatcher{
							pos:        position{line: 694, col: 18, offset: 16729},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reBody",
			pos:  position{line: 696, col: 1, offset: 16752},
			expr: &actionExpr{
				pos: position{line: 697, col: 5, offset: 16763},
				run: (*parser).callonreBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 697, col: 5, offset: 16763},
					expr: &choiceExpr{
						pos: position{line: 697, col: 6, offset: 16764},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 697, col: 6, offset: 16764},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 697, col: 13, offset: 16771},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "escapedChar",
			pos:  position{line: 699, col: 1, offset: 16811},
			expr: &charClassMatcher{
				pos:        position{line: 700, col: 5, offset: 16827},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "ws",
			pos:  position{line: 702, col: 1, offset: 16842},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 16849},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 16849},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 704, col: 5, offset: 16858},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 705, col: 5, offset: 16867},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 706, col: 5, offset: 16876},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 707, col: 5, offset: 16884},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 708, col: 5, offset: 16897},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 710, col: 1, offset: 16907},
			expr: &oneOrMoreExpr{
				pos: position{line: 710, col: 18, offset: 16924},
				expr: &ruleRefExpr{
					pos:  position{line: 710, col: 18, offset: 16924},
					name: "ws",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 711, col: 1, offset: 16928},
			expr: &zeroOrMoreExpr{
				pos: position{line: 711, col: 6, offset: 16933},
				expr: &ruleRefExpr{
					pos:  position{line: 711, col: 6, offset: 16933},
					name: "ws",
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 713, col: 1, offset: 16938},
			expr: &notExpr{
				pos: position{line: 713, col: 7, offset: 16944},
				expr: &anyMatcher{
					line: 713, col: 8, offset: 16945,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onquery2(procs interface{}) (interface{}, error) {
	filt := makeFilterProc(makeMatchAll())
	return makeSequentialProc(append([]interface{}{filt}, (procs.([]interface{}))...)), nil

}

func (p *parser) callonquery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery2(stack["procs"])
}

func (c *current) onquery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return makeSequentialProc(append([]interface{}{s}, (rest.([]interface{}))...)), nil
	}

}

func (p *parser) callonquery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery5(stack["s"], stack["rest"])
}

func (c *current) onquery14(s interface{}) (interface{}, error) {
	return makeSequentialProc([]interface{}{s}), nil

}

func (p *parser) callonquery14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery14(stack["s"])
}

func (c *current) onprocChain1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	} else {
		return []interface{}{first}, nil
	}

}

func (p *parser) callonprocChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocChain1(stack["first"], stack["rest"])
}

func (c *current) onchainedProc1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonchainedProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainedProc1(stack["p"])
}

func (c *current) onsearch1(expr interface{}) (interface{}, error) {
	return makeFilterProc(expr), nil

}

func (p *parser) callonsearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearch1(stack["expr"])
}

func (c *current) onsearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeOrChain(first, rest), nil

}

func (p *parser) callonsearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onoredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonoredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onoredSearchTerm1(stack["t"])
}

func (c *current) onsearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeAndChain(first, rest), nil

}

func (p *parser) callonsearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onandedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonandedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandedSearchTerm1(stack["f"])
}

func (c *current) onsearchFactor2(e interface{}) (interface{}, error) {
	return makeLogicalNot(e), nil

}

func (p *parser) callonsearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor2(stack["e"])
}

func (c *current) onsearchFactor14(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchFactor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor14(stack["s"])
}

func (c *current) onsearchFactor20(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonsearchFactor20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor20(stack["expr"])
}

func (c *current) onsearchPred2(fieldComparator, v interface{}) (interface{}, error) {
	return makeCompareAny(fieldComparator, false, v), nil

}

func (p *parser) callonsearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred2(stack["fieldComparator"], stack["v"])
}

func (c *current) onsearchPred13(fieldComparator, v interface{}) (interface{}, error) {
	return makeCompareAny(fieldComparator, true, v), nil

}

func (p *parser) callonsearchPred13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred13(stack["fieldComparator"], stack["v"])
}

func (c *current) onsearchPred24(f, fieldComparator, v interface{}) (interface{}, error) {
	return makeCompareField(fieldComparator, f, v), nil

}

func (p *parser) callonsearchPred24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred24(stack["f"], stack["fieldComparator"], stack["v"])
}

func (c *current) onsearchPred36(v interface{}) (interface{}, error) {
	return makeCompareAny("in", false, v), nil

}

func (p *parser) callonsearchPred36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred36(stack["v"])
}

func (c *current) onsearchPred46(v, f interface{}) (interface{}, error) {
	return makeCompareField("in", f, v), nil

}

func (p *parser) callonsearchPred46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred46(stack["v"], stack["f"])
}

func (c *current) onsearchPred57(v interface{}) (interface{}, error) {
	return makeSearch(string(c.text), v, false), nil

}

func (p *parser) callonsearchPred57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred57(stack["v"])
}

func (c *current) onsearchPred60(v interface{}) (interface{}, error) {
	return makeSearch(string(c.text), makeLiteral("string", v), true), nil

}

func (p *parser) callonsearchPred60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred60(stack["v"])
}

func (c *current) onsearchLiteral8(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonsearchLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral8(stack["i"])
}

func (c *current) onsearchLiteral14(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral14(stack["v"])
}

func (c *current) onsearchLiteral22(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral22(stack["v"])
}

func (c *current) onsearchValue3(v interface{}) (interface{}, error) {
	return makeLiteral("string", v), nil

}

func (p *parser) callonsearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchValue3(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("string", v), nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("regexp", v), nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onPortLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("port", v), nil

}

func (p *parser) callonPortLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPortLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return makeLiteral("net", v), nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral5(v interface{}) (interface{}, error) {
	return makeLiteral("net", v), nil

}

func (p *parser) callonSubnetLiteral5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral5(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return makeLiteral("ip", v), nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral5(v interface{}) (interface{}, error) {
	return makeLiteral("ip", v), nil

}

func (p *parser) callonAddressLiteral5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral5(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("float64", v), nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("int64", v), nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return makeLiteral("bool", "true"), nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return makeLiteral("bool", "false"), nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return makeLiteral("null", ""), nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onprocList1(first, rest interface{}) (interface{}, error) {
	fp := makeSequentialProc(first)
	if rest != nil {
		return makeParallelProc(append([]interface{}{fp}, (rest.([]interface{}))...)), nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonprocList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocList1(stack["first"], stack["rest"])
}

func (c *current) onparallelChain1(ch interface{}) (interface{}, error) {
	return makeSequentialProc(ch), nil
}

func (p *parser) callonparallelChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparallelChain1(stack["ch"])
}

func (c *current) onproc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonproc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onproc4(stack["proc"])
}

func (c *current) ongroupByKeys9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callongroupByKeys9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKeys9(stack["cl"])
}

func (c *current) ongroupByKeys1(first, rest interface{}) (interface{}, error) {
	return makeGroupByKeys(first, rest), nil

}

func (p *parser) callongroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKeys1(stack["first"], stack["rest"])
}

func (c *current) ongroupByKey3(field interface{}) (interface{}, error) {
	return makeGroupByKey(string(c.text), field), nil
}

func (p *parser) callongroupByKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByKey3(stack["field"])
}

func (c *current) oneveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) calloneveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneveryDur1(stack["dur"])
}

func (c *current) onandToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonandToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandToken1()
}

func (c *current) onorToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonorToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onorToken1()
}

func (c *current) oninToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) calloninToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninToken1()
}

func (c *current) onnotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonnotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotToken1()
}

func (c *current) onfieldName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonfieldName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldName1()
}

func (c *current) onfieldReference8(field interface{}) (interface{}, error) {
	return makeFieldCall("RecordFieldRead", nil, field), nil
}

func (p *parser) callonfieldReference8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReference8(stack["field"])
}

func (c *current) onfieldReference13(index interface{}) (interface{}, error) {
	return makeFieldCall("Index", nil, index), nil
}

func (p *parser) callonfieldReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReference13(stack["index"])
}

func (c *current) onfieldReference1(base, derefs interface{}) (interface{}, error) {
	return chainFieldCalls(base, derefs), nil

}

func (p *parser) callonfieldReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReference1(stack["base"], stack["derefs"])
}

func (c *current) onfieldExpr2(op, field interface{}) (interface{}, error) {
	return makeFieldCall(op, field, nil), nil

}

func (p *parser) callonfieldExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExpr2(stack["op"], stack["field"])
}

func (c *current) onfieldOp1() (interface{}, error) {
	return "Len", nil
}

func (p *parser) callonfieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldOp1()
}

func (c *current) onfieldExprList1(first, rest interface{}) (interface{}, error) {
	result := []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonfieldExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExprList1(stack["first"], stack["rest"])
}

func (c *current) onfieldRefDotOnly1(base, refs interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonfieldRefDotOnly1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldRefDotOnly1(stack["base"], stack["refs"])
}

func (c *current) oncountOp1() (interface{}, error) {
	return "Count", nil
}

func (p *parser) calloncountOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountOp1()
}

func (c *current) onfieldReducerOp2() (interface{}, error) {
	return "Sum", nil
}

func (p *parser) callonfieldReducerOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp2()
}

func (c *current) onfieldReducerOp4() (interface{}, error) {
	return "Avg", nil
}

func (p *parser) callonfieldReducerOp4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp4()
}

func (c *current) onfieldReducerOp6() (interface{}, error) {
	return "Stdev", nil
}

func (p *parser) callonfieldReducerOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp6()
}

func (c *current) onfieldReducerOp8() (interface{}, error) {
	return "Stdev", nil
}

func (p *parser) callonfieldReducerOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp8()
}

func (c *current) onfieldReducerOp10() (interface{}, error) {
	return "Var", nil
}

func (p *parser) callonfieldReducerOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp10()
}

func (c *current) onfieldReducerOp12() (interface{}, error) {
	return "Entropy", nil
}

func (p *parser) callonfieldReducerOp12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp12()
}

func (c *current) onfieldReducerOp14() (interface{}, error) {
	return "Min", nil
}

func (p *parser) callonfieldReducerOp14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp14()
}

func (c *current) onfieldReducerOp16() (interface{}, error) {
	return "Max", nil
}

func (p *parser) callonfieldReducerOp16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp16()
}

func (c *current) onfieldReducerOp18() (interface{}, error) {
	return "First", nil
}

func (p *parser) callonfieldReducerOp18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp18()
}

func (c *current) onfieldReducerOp20() (interface{}, error) {
	return "Last", nil
}

func (p *parser) callonfieldReducerOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp20()
}

func (c *current) onfieldReducerOp22() (interface{}, error) {
	return "CountDistinct", nil
}

func (p *parser) callonfieldReducerOp22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp22()
}

func (c *current) onpaddedFieldExpr1(field interface{}) (interface{}, error) {
	return field, nil
}

func (p *parser) callonpaddedFieldExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpaddedFieldExpr1(stack["field"])
}

func (c *current) oncountReducer1(op, field interface{}) (interface{}, error) {
	return makeReducer(op, "count", field), nil

}

func (p *parser) calloncountReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountReducer1(stack["op"], stack["field"])
}

func (c *current) onfieldReducer1(op, field interface{}) (interface{}, error) {
	return makeReducer(op, toLowerCase(op), field), nil

}

func (p *parser) callonfieldReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducer1(stack["op"], stack["field"])
}

func (c *current) onreduceProc1(every, reducers, keys, limit interface{}) (interface{}, error) {
	if OR(keys, every) != nil {
		if keys != nil {
			keys = keys.([]interface{})[1]
		} else {
			keys = []interface{}{}
		}

		if every != nil {
			every = every.([]interface{})[0]
		}

		return makeGroupByProc(every, limit, keys, reducers), nil
	}

	return makeReduceProc(reducers), nil

}

func (p *parser) callonreduceProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreduceProc1(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onreducerExpr2(field, f interface{}) (interface{}, error) {
	return overrideReducerVar(f, field), nil

}

func (p *parser) callonreducerExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerExpr2(stack["field"], stack["f"])
}

func (c *current) onreducerList1(first, rest interface{}) (interface{}, error) {
	result := []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonreducerList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerList1(stack["first"], stack["rest"])
}

func (c *current) onsort8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonsort8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort8(stack["l"])
}

func (c *current) onsort1(args, list interface{}) (interface{}, error) {
	return makeSortProc(args, list)

}

func (p *parser) callonsort1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort1(stack["args"], stack["list"])
}

func (c *current) onsortArgs2(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonsortArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs2(stack["a"])
}

func (c *current) onsortArg2() (interface{}, error) {
	return makeArg("r", nil), nil
}

func (p *parser) callonsortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg2()
}

func (c *current) onsortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg9()
}

func (c *current) onsortArg4(where interface{}) (interface{}, error) {
	return makeArg("nulls", where), nil
}

func (p *parser) callonsortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg4(stack["where"])
}

func (c *current) ontop6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callontop6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop6(stack["n"])
}

func (c *current) ontop18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callontop18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop18(stack["f"])
}

func (c *current) ontop1(limit, flush, list interface{}) (interface{}, error) {
	return makeTopProc(list, limit, flush), nil

}

func (p *parser) callontop1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop1(stack["limit"], stack["flush"], stack["list"])
}

func (c *current) onprocLimitArg1(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonprocLimitArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocLimitArg1(stack["limit"])
}

func (c *current) oncutArg2() (interface{}, error) {
	return makeArg("c", nil), nil
}

func (p *parser) calloncutArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutArg2()
}

func (c *current) oncutAssignment3(field interface{}) (interface{}, error) {
	return makeFieldAssignment("", field), nil

}

func (p *parser) calloncutAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncutAssignment3(stack["field"])
}

func (c *current) oncut11(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) calloncut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut11(stack["cl"])
}

func (c *current) oncut1(arg, first, rest interface{}) (interface{}, error) {
	return makeCutProc(arg, first, rest)
}

func (p *parser) calloncut1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut1(stack["arg"], stack["first"], stack["rest"])
}

func (c *current) onhead2(count interface{}) (interface{}, error) {
	return makeHeadProc(count), nil
}

func (p *parser) callonhead2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead2(stack["count"])
}

func (c *current) onhead8() (interface{}, error) {
	return makeHeadProc(1), nil
}

func (p *parser) callonhead8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead8()
}

func (c *current) ontail2(count interface{}) (interface{}, error) {
	return makeTailProc(count), nil
}

func (p *parser) callontail2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail2(stack["count"])
}

func (c *current) ontail8() (interface{}, error) {
	return makeTailProc(1), nil
}

func (p *parser) callontail8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail8()
}

func (c *current) onfilter1(expr interface{}) (interface{}, error) {
	return makeFilterProc(expr), nil

}

func (p *parser) callonfilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilter1(stack["expr"])
}

func (c *current) onuniq2() (interface{}, error) {
	return makeUniqProc(true), nil

}

func (p *parser) callonuniq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq2()
}

func (c *current) onuniq7() (interface{}, error) {
	return makeUniqProc(false), nil

}

func (p *parser) callonuniq7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq7()
}

func (c *current) onput9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonput9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput9(stack["cl"])
}

func (c *current) onput1(first, rest interface{}) (interface{}, error) {
	return makePutProc(first, rest), nil

}

func (p *parser) callonput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput1(stack["first"], stack["rest"])
}

func (c *current) onrename9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonrename9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename9(stack["cl"])
}

func (c *current) onrename1(first, rest interface{}) (interface{}, error) {
	return makeRenameProc(first, rest)
}

func (p *parser) callonrename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrename1(stack["first"], stack["rest"])
}

func (c *current) onExpressionAssignment1(f, e interface{}) (interface{}, error) {
	return makeExpressionAssignment(f, e), nil

}

func (p *parser) callonExpressionAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionAssignment1(stack["f"], stack["e"])
}

func (c *current) onFieldAssignment1(l, r interface{}) (interface{}, error) {
	return makeFieldAssignment(l, r), nil

}

func (p *parser) callonFieldAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldAssignment1(stack["l"], stack["r"])
}

func (c *current) onPrimaryExpression12(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimaryExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryExpression12(stack["expr"])
}

func (c *current) onFieldReference1(f interface{}) (interface{}, error) {
	return chainFieldCalls(f, []interface{}{}), nil

}

func (p *parser) callonFieldReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReference1(stack["f"])
}

func (c *current) onConditionalExpression2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return makeConditionalExpr(condition, thenClause, elseClause), nil

}

func (p *parser) callonConditionalExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpression2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalORExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalORExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression1(stack["first"], stack["rest"])
}

func (c *current) onLogicalANDExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalANDExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpression2(e interface{}) (interface{}, error) {
	return makeUnaryExpr("!", e), nil

}

func (p *parser) callonNotExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["e"])
}

func (c *current) onCastExpression7(ct interface{}) (interface{}, error) {
	return ct, nil
}

func (p *parser) callonCastExpression7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression7(stack["ct"])
}

func (c *current) onCastExpression1(e, t interface{}) (interface{}, error) {
	if t != nil {
		return makeCastExpression(e, t), nil
	} else {
		return e, nil
	}

}

func (p *parser) callonCastExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpression1(stack["e"], stack["t"])
}

func (c *current) onCallExpression2(fn, args interface{}) (interface{}, error) {
	return makeFunctionCall(fn, args), nil

}

func (p *parser) callonCallExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression2(stack["fn"], stack["args"])
}

func (c *current) onFunctionName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFunctionName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDereferenceExpression20(field interface{}) (interface{}, error) {
	return makeLiteral("string", string(c.text)), nil
}

func (p *parser) callonDereferenceExpression20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDereferenceExpression20(stack["field"])
}

func (c *current) onDereferenceExpression1(base, derefs interface{}) (interface{}, error) {
	return makeBinaryExprChain(base, derefs), nil

}

func (p *parser) callonDereferenceExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDereferenceExpression1(stack["base"], stack["derefs"])
}

func (c *current) onseconds2() (interface{}, error) {
	return makeDuration(1), nil
}

func (p *parser) callonseconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds2()
}

func (c *current) onseconds4(num interface{}) (interface{}, error) {
	return makeDuration(num), nil
}

func (p *parser) callonseconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds4(stack["num"])
}

func (c *current) onminutes2() (interface{}, error) {
	return makeDuration(60), nil
}

func (p *parser) callonminutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes2()
}

func (c *current) onminutes4(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 60), nil
}

func (p *parser) callonminutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes4(stack["num"])
}

func (c *current) onhours2() (interface{}, error) {
	return makeDuration(3600), nil
}

func (p *parser) callonhours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours2()
}

func (c *current) onhours4(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 3600), nil
}

func (p *parser) callonhours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours4(stack["num"])
}

func (c *current) ondays2() (interface{}, error) {
	return makeDuration(3600 * 24), nil
}

func (p *parser) callondays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays2()
}

func (c *current) ondays4(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 3600 * 24), nil
}

func (p *parser) callondays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays4(stack["num"])
}

func (c *current) onweeks1(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 3600 * 24 * 7), nil
}

func (p *parser) callonweeks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks1(stack["num"])
}

func (c *current) onaddr1(a interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonaddr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onaddr1(stack["a"])
}

func (c *current) onport1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonport1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onport1(stack["v"])
}

func (c *current) onip6addr2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr2(stack["a"], stack["b"])
}

func (c *current) onip6addr9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonip6addr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onip6addr22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr22(stack["a"], stack["b"])
}

func (c *current) onip6addr30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonip6addr30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr30(stack["a"], stack["b"])
}

func (c *current) onip6addr38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonip6addr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr38()
}

func (c *current) onh_append1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonh_append1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_append1(stack["v"])
}

func (c *current) onh_prepend1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonh_prepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_prepend1(stack["v"])
}

func (c *current) onsubnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonsubnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsubnet1(stack["a"], stack["m"])
}

func (c *current) onip6subnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonip6subnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6subnet1(stack["a"], stack["m"])
}

func (c *current) onunsignedInteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonunsignedInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunsignedInteger1(stack["s"])
}

func (c *current) onsuint1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsuint1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuint1()
}

func (c *current) oninteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) calloninteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninteger1(stack["s"])
}

func (c *current) onsinteger1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsinteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsinteger1()
}

func (c *current) ondouble1(s interface{}) (interface{}, error) {
	return parseFloat(s), nil

}

func (p *parser) callondouble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondouble1(stack["s"])
}

func (c *current) onsdouble2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble2()
}

func (c *current) onsdouble13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble13()
}

func (c *current) onh161(chars interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonh161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh161(stack["chars"])
}

func (c *current) onsearchWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonsearchWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWord1(stack["chars"])
}

func (c *current) onsearchWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart2(stack["s"])
}

func (c *current) onsearchWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsearchWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart9()
}

func (c *current) onquotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString2(stack["v"])
}

func (c *current) onquotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString9(stack["v"])
}

func (c *current) ondoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callondoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar2()
}

func (c *current) ondoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callondoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar9(stack["s"])
}

func (c *current) onsingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar2()
}

func (c *current) onsingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar9(stack["s"])
}

func (c *current) onescapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonescapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onescapeSequence2()
}

func (c *current) onsingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonsingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape5()
}

func (c *current) onsingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonsingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape7()
}

func (c *current) onsingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonsingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape9()
}

func (c *current) onsingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonsingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape11()
}

func (c *current) onsingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonsingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape13()
}

func (c *current) onsingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonsingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape15()
}

func (c *current) onsearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonsearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape2()
}

func (c *current) onsearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonsearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape4()
}

func (c *current) onunicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape2(stack["chars"])
}

func (c *current) onunicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape11(stack["chars"])
}

func (c *current) onreString1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonreString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreString1(stack["v"])
}

func (c *current) onreBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonreBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
